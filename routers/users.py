from datetime import datetime

import aiogram
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from middleware import CheckPrivateMessageMiddleware
from database import service as db

from database.models import UserCreate
from .payments import create_payment_invoice
from .utils import is_user_exists, create_or_update_operation_and_subscribe, generate_invite_link
from routers import messages as ms, keyboards as kb
from settings import settings

router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())


# BLOCK OTHER TYPES
@router.message(~F.content_type.in_({'text', 'pre_checkout_query', 'successful_payment'}))
async def block_types_handler(message: types.Message) -> None:
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)\n\n"
                         "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –≤–æ –≤–∫–ª–∞–¥–∫–µ \"–ú–µ–Ω—é\" "
                         "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")


@router.message(Command("start"))
async def start_message(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if not is_user_exists(str(message.from_user.id)):
        user_model = UserCreate(
            tg_id=str(message.from_user.id),
            username=message.from_user.username,
            firstname=message.from_user.first_name,
            lastname=message.from_user.last_name
        )
        db.create_user(user_model)

    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=kb.buy_subscribe_keyboard().as_markup())


@router.callback_query(lambda callback: callback.data == "back_menu")
@router.message(Command("menu"))
async def main_menu(message: types.Message | types.CallbackQuery) -> None:
    if type(message) == types.Message:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
                             reply_markup=kb.buy_subscribe_keyboard().as_markup())
    else:
        await message.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
                             reply_markup=kb.buy_subscribe_keyboard().as_markup())


@router.callback_query(lambda callback: callback.data == "buy_sub")
@router.callback_query(lambda callback: callback.data == "back-choosePeriod")
async def buy_menu(callback: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ üóì", reply_markup=kb.payment_period_subscribe().as_markup())


@router.callback_query(lambda callback: callback.data.split("_")[0] == "subPeriod")
@router.callback_query(lambda callback: callback.data.split("_")[0] == "back-choosePayMethod")
async def choose_buy_method(callback: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    period = callback.data.split("_")[1]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=kb.payment_methods(period).as_markup())


# –û–ü–õ–ê–¢–ê –ö–ê–†–¢–û–ô
@router.callback_query(lambda callback: callback.data.split('_')[0] == "pay-method-card")
async def create_invoice_handler(callback: types.CallbackQuery) -> None:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    period = callback.data.split("_")[1]
    payment_invoice = create_payment_invoice(period)

    await callback.message.answer_invoice(**payment_invoice)
    await callback.message.delete()


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: types.Message, bot: aiogram.Bot):
    """–í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ"""
    payer_tg_id = str(message.from_user.id)
    amount = int(message.successful_payment.invoice_payload)
    if amount == settings.amount_1:
        months = settings.months_1
    elif amount == settings.amount_3:
        months = settings.months_3
    else:
        months = settings.months_inf

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription, need_link = create_or_update_operation_and_subscribe(payer_tg_id, months, amount)

    if need_link:
        # —Å–æ–∑–¥–∞–Ω–∏–µ invite —Å—Å—ã–ª–∫–∏
        name = message.from_user.username if message.from_user.username else message.from_user.first_name
        invite_link = await generate_invite_link(bot, name)

        # –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription.is_infinity:
            user_message = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ <b>–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>Ô∏è ‚ôæÔ∏è\n\n" \
                           "<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–∞ 1 –¥–µ–Ω—å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑</b>"
        # –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        else:
            user_message = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{datetime.strftime(subscription.expire_date, '%d.%m.%Y')}</b> üóìÔ∏è\n\n" \
                           "<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–∞ 1 –¥–µ–Ω—å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑</b>"

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(user_message, reply_markup=kb.invite_link_keyboard(invite_link).as_markup())

    # –±–µ–∑ —Å—Å—ã–ª–∫–∏ (–≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
    else:
        # –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription.is_infinity:
            user_message = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ <b>–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> ‚ôæÔ∏èÔ∏è"

        # –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        else:
            user_message = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{datetime.strftime(subscription.expire_date, '%d.%m.%Y')}</b> üóìÔ∏è"

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ —Å—Å—ã–ª–∫–∏ (—Ç.–∫. –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –æ–Ω –≤ –∫–∞–Ω–∞–ª–µ)
        await message.answer(user_message)


# –û–ü–õ–ê–¢–ê –ü–û –°–°–´–õ–ö–ï
@router.callback_query(lambda callback: callback.data.split('_')[0] == "pay-method-link")
async def create_invoice_handler_link(callback: types.CallbackQuery) -> None:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    sub_period = callback.data.split("_")[1]
    invoice_message = ms.get_invoice_message(sub_period)

    await callback.message.edit_text(invoice_message, reply_markup=kb.payment_confirm_keyboard(sub_period).as_markup())


@router.callback_query(lambda callback: callback.data.split('_')[0] == "paid")
async def waiting_message_handler(callback: types.CallbackQuery, bot: aiogram.Bot) -> None:
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞"""
    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    period = callback.data.split("_")[1]
    invoice_message = ms.get_invoice_message(period)
    await callback.message.edit_text(invoice_message)

    # –æ–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    tg_id = str(callback.from_user.id)
    user = db.get_user_by_tg_id(tg_id)
    message_to_admin = ms.message_for_admin(user, period)
    await bot.send_message(settings.admins[0],
                           message_to_admin,
                           reply_markup=kb.admin_payment_confirm_keyboard(tg_id, period).as_markup())

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    message = ms.get_waiting_message()
    await callback.message.answer(message)


@router.callback_query(lambda callback: callback.data == "sub_status")
async def check_sub_status(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    tg_id = callback.from_user.id
    user = db.get_user_subscription_by_tg_id(str(tg_id))
    msg = ms.subscription_info(user)

    await callback.message.edit_text(msg, reply_markup=kb.back_to_main_menu().as_markup())


@router.message(Command("help"))
async def help_handler(message: types.Message) -> None:
    """Help message"""
    msg = ms.get_help_message()
    await message.answer(msg)


