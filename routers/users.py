from datetime import datetime, timedelta

import aiogram
import pytz
from aiogram import Router, types, Bot, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from middleware import CheckPrivateMessageMiddleware
from database import service as db

from database.models import UserCreate, OperationCreate, SubscriptionCreate
from .utils import is_user_exists, generate_invite_link
from routers import messages as ms, keyboards as kb
from settings import settings

router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())


# BLOCK OTHER TYPES
@router.message(~F.content_type.in_({'text'}))
async def block_types_handler(message: types.Message) -> None:
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)\n\n"
                         "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –≤–æ –≤–∫–ª–∞–¥–∫–µ \"–ú–µ–Ω—é\" "
                         "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")


@router.message(Command("start"))
async def start_message(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if not is_user_exists(str(message.from_user.id)):
        user_model = UserCreate(
            tg_id=str(message.from_user.id),
            username=message.from_user.username,
            firstname=message.from_user.first_name,
            lastname=message.from_user.last_name
        )
        db.create_user(user_model)

    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
                                    reply_markup=kb.buy_subscribe_keyboard().as_markup())


@router.callback_query(lambda callback: callback.data == "back_menu")
@router.message(Command("menu"))
async def main_menu(message: types.Message | types.CallbackQuery) -> None:
    if type(message) == types.Message:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
                             reply_markup=kb.buy_subscribe_keyboard().as_markup())
    else:
        await message.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
                             reply_markup=kb.buy_subscribe_keyboard().as_markup())


@router.callback_query(lambda callback: callback.data == "buy_sub")
async def buy_menu(callback: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ üóì", reply_markup=kb.payment_period_subscribe().as_markup())


@router.callback_query(lambda callback: callback.data.split('_')[0] == "subPeriod")
async def create_invoice_handler(callback: types.CallbackQuery) -> None:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    sub_period = callback.data.split("_")[1]
    invoice_message = ms.get_invoice_message(sub_period)

    await callback.message.edit_text(invoice_message, reply_markup=kb.payment_confirm_keyboard(sub_period).as_markup())


@router.callback_query(lambda callback: callback.data.split('_')[0] == "paid")
async def create_invoice_handler(callback: types.CallbackQuery, bot: aiogram.Bot) -> None:
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞"""
    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    period = callback.data.split("_")[1]
    invoice_message = ms.get_invoice_message(period)
    await callback.message.edit_text(invoice_message)

    # –æ–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    tg_id = str(callback.message.from_user.id)
    user = db.get_user_by_tg_id(tg_id)
    message_to_admin = ms.message_for_admin(user, period)
    await bot.send_message(settings.admins[0],
                           message_to_admin,
                           reply_markup=kb.admin_payment_confirm_keyboard(tg_id, period).as_markup())

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –¥–æ–∂–¥–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∞
    message = ms.get_waiting_message()
    await callback.message.answer(message)


@router.message(F.successful_payment)
async def successful_payment(message: types.Message, bot: aiogram.Bot):
    amount = int(message.successful_payment.invoice_payload)
    months = int(amount / 100)
    tg_id = str(message.from_user.id)

    # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    user = db.get_user_by_tg_id(tg_id)
    operation_model = OperationCreate(
        created_at=datetime.now(pytz.timezone('Europe/Moscow')),
        amount=amount,
        user_id=user.id
    )
    db.create_operation(operation_model)

    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    user_with_sub = db.get_user_subscription_by_tg_id(str(message.from_user.id))

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    name = message.from_user.username if message.from_user.username else message.from_user.first_name
    invite_link = await generate_invite_link(bot, name)

    # –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if user_with_sub.subscription:
        new_expire_date = db.update_subscription_expire_date(tg_id, months)
        await message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n"
                             f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ <b>{datetime.strftime(new_expire_date, '%d.%m.%Y')}</b> üóìÔ∏è\n\n"
                             f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–∞ 1 –¥–µ–Ω—å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑</b>",
                             reply_markup=kb.invite_link_keyboard(invite_link).as_markup())

    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    else:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expire_date = datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(days=30*months)
        subscription_model = SubscriptionCreate(
            expire_date=expire_date,
            is_active=True,
            user_id=user.id
        )
        new_subscription = db.create_subscription(subscription_model)

        await message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n"
                             f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–æ <b>{datetime.strftime(new_subscription.expire_date, '%d.%m.%Y')}</b> üóìÔ∏è\n\n"
                             f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –¥–µ–Ω—å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑</b>",
                             reply_markup=kb.invite_link_keyboard(invite_link).as_markup())


@router.callback_query(lambda callback: callback.data == "sub_status")
async def check_sub_status(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    tg_id = callback.from_user.id
    user = db.get_user_subscription_by_tg_id(str(tg_id))
    msg = ms.subscription_info(user)

    await callback.message.edit_text(msg, reply_markup=kb.back_to_main_menu().as_markup())


@router.message(Command("delete"))
async def delete_handler(message: types.Message) -> None:
    """Help message"""
    db.delete_user(message.from_user.id)
    await message.answer("User deleted")


@router.message(Command("help"))
async def help_handler(message: types.Message) -> None:
    """Help message"""
    msg = ms.get_help_message()
    await message.answer(msg)


